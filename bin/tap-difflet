#!/usr/bin/env node

/* Modules */

var parser    = require('tap-parser-yaml');
var through   = require('through2');
var duplexer  = require('duplexer');
var hirestime = require('hirestime');
var prettyms  = require('pretty-ms');
var chalk     = require('chalk');
var objdiff   = require('difflet')({
  indent: 2,
  comment: true
}).compare;

var ansidiff  = require('ansidiff');

var tap = parser();
var out = through();
var dup = duplexer(tap, out);

/* Helpers */

function output(str) {
  out.push(str);
}

/* Parser */

var timer   = hirestime();
var errors  = [];
var currentTest, lastReportedTest;
var report = [];

tap.on('comment', function(comment) {
    if (/^tests\s+[0-9]+$/gi.test(comment)) {
        output('\n');
        comment = chalk.white.bold(comment);
    }
    else if (/^pass\s+[0-9]+$/gi.test(comment)) {
        comment = chalk.green.bold(comment);
    }
    else if (/^fail\s+[0-9]+$/gi.test(comment)) {
        comment = chalk.red.bold(comment);
    }
    else if (/^ok$/gi.test(comment)) {
        return;
    }
    else {
        comment = chalk.white.bold(comment);
        currentTest = chalk.white.bold(comment);
    }
});

tap.on('assert', function(res) {
  if (res.ok) {
    output(chalk.green.bold('.'));
  } else {
    output(chalk.red.bold('тип'));
    assert = chalk.red.bold('тип ' + res.name);
    errors.push(currentTest + '\n' + chalk.white(assert) + '\n');
    if (lastReportedTest === currentTest) {
      report.push('   ' + chalk.white(assert));
    } else {
      report.push(currentTest + '\n   ' + chalk.white(assert));
    }
    lastReportedTest = currentTest;
  }
});

tap.on('extra', function(res) {
  if (res !== '') {
    if (res.indexOf('---') === 0){
      errors.push(chalk.gray(res));
      report.push(chalk.gray(res));
      output(errors[errors.length-1]);
      output('\n');
    } else {
      output('    ' + chalk.blue(res));
      output('\n');
    }
  }
});

tap.on('results', function(res) {
  var count = res.asserts.length;
  var time  = prettyms(timer());
  output('\n');

  report.forEach(output);

  output(chalk.green.bold(Math.max(0,count-errors.length) + ' passing') + chalk.gray(' (' + time + ')'));
  if (errors.length) {
    output(chalk.red.bold('\n' + errors.length + ' failing'));
    output(errors);
  }
});

tap.on('diag', function (diag) {
  var expected, actual, at,
      gotExpected = true,
      gotActual = true,
      gotAt = true,
      str = '';

  if (diag.hasOwnProperty('expected')) {
    expected = diag.expected;
  } else if (diag.hasOwnProperty('wanted')) {
    expected = diag.wanted;
  } else {
    gotExpected = false;
  }

  if (diag.hasOwnProperty('actual')) {
    actual = diag.actual;
  } else if (diag.hasOwnProperty('found')) {
    actual = diag.found;
  } else {
    gotActual = false;
  }

  if (diag.hasOwnProperty('at')) {
    at = diag.at;
  }
  else {
    gotAt = false;
  }

  if (gotActual && gotExpected) {
    if (typeof expected !== typeof actual ||
        typeof expected === "object" && (!actual || !expected)) {
      str = 'Expected ' + typeof expected + ' but got ' + typeof actual;
    } else if (typeof expected === "string") {
      if (str.indexOf('\n') >= 0) {
        str = ansidiff.lines(expected, actual);
      } else {
        str = ansidiff.chars(expected, actual);
      }
    } else if (typeof expected === "object") {
      str = objdiff(expected, actual);
    } else {
      str = chalk.white('Expected ') + chalk.bold(''+expected) + chalk.white(' but got ') + chalk.bold(''+actual);
    }
  }

  if (gotAt) {
    str = str + '\n\n' + chalk.grey('At: ' + at);
  }

  if (str) {
    str = '\n' + str;
    str = str.replace(/\n/g, '\n      ');
    errors[errors.length-1] += str;
    report.push(str + '\n\n');
  }

});

/* Output */

process.stdin.pipe(dup).pipe(process.stdout);
process.on('exit', function () {
  console.log('\n');
  process.exit(errors.length);
});

// vim:filetype=javascript
